{"version":3,"sources":["components/CreateTask.js","components/UpdateTask.js","components/CreateProject.js","components/UpdateProject.js","components/ViewPerProject.js","App.js","serviceWorker.js","index.js"],"names":["CreateTask","props","state","taskName","description","duration","availableTask","dependencies","this","populateDependencyTask","fetch","then","res","json","setState","e","target","value","Array","from","selectedOptions","option","dep","forEach","element","push","taskId","arr","i","key","method","headers","Accept","body","JSON","stringify","alert","catch","message","Container","fluid","Row","xl","Col","Form","Label","Control","type","placeholder","onChange","taskNameHandler","descriptionHandler","as","durationHandler","custom","size","buildDurationOptions","dependencyTaskHandler","multiple","map","item","Button","variant","onClick","saveTask","refreshComps","Component","UpdateTask","eligibleTasks","selectedTasks","populateTasks","val","initializeForm","populateTasksWithVal","updateForm","CreateProject","date","startDate","projectName","projectDescription","Date","taskViews","populateTask","projectNameHandler","projectDescriptionHandler","saveProject","UpdateProject","projectId","listProjects","populateProject","populateProjectWithVal","format","localizer","momentLocalizer","moment","Event","event","popoverClickRootClose","Popover","id","style","zIndex","title","Table","striped","hover","responsive","task","taskType","endDate","subItem","OverlayTrigger","trigger","rootClose","container","placement","overlay","ViewPerProject","events","initializeTable","createTaskEvents","ts","start","end","md","span","bordered","defaultDate","defaultView","views","height","components","App","Tabs","defaultActiveKey","Tab","eventKey","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.1319c730.chunk.js","sourcesContent":["import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass CreateTask extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      taskName: \"\",\r\n      description: \"\",\r\n      duration: 0,\r\n      availableTask: [],\r\n      dependencies: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateDependencyTask();\r\n  }\r\n\r\n  populateDependencyTask() {\r\n    let url = 'http://' + process.env.REACT_APP_SPRING_BOOT_BASE_PORT + '/rest/task/all';\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          availableTask: json,\r\n        });\r\n      });\r\n  }\r\n\r\n  taskNameHandler(e) {\r\n    this.setState({ taskName: e.target.value });\r\n  }\r\n\r\n  descriptionHandler(e) {\r\n    this.setState({ description: e.target.value });\r\n  }\r\n\r\n  durationHandler(e) {\r\n    this.setState({ duration: e.target.value });\r\n  }\r\n\r\n  dependencyTaskHandler(e) {\r\n    let value = Array.from(e.target.selectedOptions, (option) => option.value);\r\n\r\n    let dep = [];\r\n\r\n    value.forEach((element) => {\r\n      dep.push({ taskId: element });\r\n    });\r\n\r\n    this.setState({ dependencies: dep });\r\n  }\r\n\r\n  buildDurationOptions() {\r\n    var arr = [];\r\n\r\n    for (let i = 1; i <= 30; i++) {\r\n      arr.push(\r\n        <option key={i} value={i}>\r\n          {i}\r\n        </option>\r\n      );\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  saveTask() {\r\n    let url = 'http://' + process.env.REACT_APP_SPRING_BOOT_BASE_PORT + '/rest/task/save';\r\n    fetch(url, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        taskName: this.state.taskName,\r\n        description: this.state.description,\r\n        duration: this.state.duration,\r\n        dependencies: this.state.dependencies,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(() => alert(\"Successfully saved task!\"))\r\n      .catch(function (e) {\r\n        alert(\"Error: \" + e.message);\r\n      });\r\n\r\n    this.setState({\r\n      taskName: \"\",\r\n      description: \"\",\r\n      duration: 1,\r\n      availableTask: [],\r\n    });\r\n\r\n    this.populateDependencyTask();\r\n  }\r\n\r\n  refreshComps() {\r\n    this.populateDependencyTask();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container fluid=\"sm\">\r\n          <Row xl={10}>\r\n            <h2>Create a new Task</h2>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Task Name</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Task Name\"\r\n                value={this.state.taskName}\r\n                onChange={(e) => this.taskNameHandler(e)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Task Description</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Description\"\r\n                value={this.state.description}\r\n                onChange={(e) => this.descriptionHandler(e)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Duration by Days</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                as=\"select\"\r\n                onChange={(e) => this.durationHandler(e)}\r\n                custom\r\n                size=\"sm\"\r\n                value={this.state.duration}\r\n              >\r\n                {this.buildDurationOptions()}\r\n              </Form.Control>\r\n            </Col>\r\n          </Row>\r\n          <Row xl>\r\n            <Col>\r\n              <Form.Label>Select Dependency Tasks</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                as=\"select\"\r\n                onChange={(e) => this.dependencyTaskHandler(e)}\r\n                multiple\r\n                custom\r\n                size=\"lg\"\r\n              >\r\n                {this.state.availableTask.map((item) => (\r\n                  <option key={item.taskId} value={item.taskId}>\r\n                    {item.taskId} - {item.taskName}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col> </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col> </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button variant=\"primary\" onClick={() => this.saveTask()}>\r\n                Save\r\n              </Button>{\" \"}\r\n              <Button variant=\"info\" onClick={() => this.refreshComps()}>\r\n                Refresh Components\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateTask;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass UpdateTask extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      taskId: 0,\r\n      taskName: \"\",\r\n      description: \"\",\r\n      duration: 0,\r\n      availableTask: [],\r\n      eligibleTasks: [],\r\n      selectedTasks: [],\r\n      dependencies: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateTasks();\r\n  }\r\n\r\n  populateTasks() {\r\n    let val;\r\n    let url =\r\n      \"http://\" +\r\n      process.env.REACT_APP_SPRING_BOOT_BASE_PORT +\r\n      \"/rest/task/all\";\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          availableTask: json,\r\n        });\r\n        val = this.state.availableTask[0].taskId;\r\n        this.initializeForm(val);\r\n      });\r\n  }\r\n\r\n  populateTasksWithVal(val) {\r\n    let url =\r\n      \"http://\" +\r\n      process.env.REACT_APP_SPRING_BOOT_BASE_PORT +\r\n      \"/rest/task/all\";\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          availableTask: json,\r\n        });\r\n        this.initializeForm(val);\r\n      });\r\n  }\r\n\r\n  taskNameHandler(e) {\r\n    this.setState({ taskName: e.target.value });\r\n  }\r\n\r\n  descriptionHandler(e) {\r\n    this.setState({ description: e.target.value });\r\n  }\r\n\r\n  durationHandler(e) {\r\n    this.setState({ duration: e.target.value });\r\n  }\r\n\r\n  dependencyTaskHandler(e) {\r\n    let value = Array.from(e.target.selectedOptions, (option) => option.value);\r\n\r\n    this.setState({ selectedTasks: value });\r\n\r\n    let dep = [];\r\n\r\n    value.forEach((element) => {\r\n      dep.push({ taskId: element });\r\n    });\r\n\r\n    this.setState({ dependencies: dep });\r\n  }\r\n\r\n  buildDurationOptions() {\r\n    var arr = [];\r\n\r\n    for (let i = 1; i <= 30; i++) {\r\n      arr.push(\r\n        <option key={i} value={i}>\r\n          {i}\r\n        </option>\r\n      );\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  initializeForm(val) {\r\n    this.setState({\r\n      taskId: val,\r\n    });\r\n\r\n    let url =\r\n      \"http://\" +\r\n      process.env.REACT_APP_SPRING_BOOT_BASE_PORT +\r\n      \"/rest/task/id/\" +\r\n      val;\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        let dep = [];\r\n\r\n        if (json.dependencies) {\r\n          json.dependencies.forEach((element) => {\r\n            dep.push(element.taskId);\r\n          });\r\n        }\r\n\r\n        this.setState({\r\n          taskName: json.taskName,\r\n          description: json.description,\r\n          duration: json.duration,\r\n          selectedTasks: dep,\r\n          dependencies: json.dependencies,\r\n        });\r\n      });\r\n\r\n    let url1 =\r\n      \"http://\" +\r\n      process.env.REACT_APP_SPRING_BOOT_BASE_PORT +\r\n      \"/rest/task/eligible/\" +\r\n      val;\r\n\r\n    fetch(url1)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          eligibleTasks: json,\r\n        });\r\n      });\r\n  }\r\n\r\n  updateForm(e) {\r\n    let val = e.target.value;\r\n    this.initializeForm(val);\r\n  }\r\n\r\n  saveTask() {\r\n\r\n    let url =\r\n      \"http://\" +\r\n      process.env.REACT_APP_SPRING_BOOT_BASE_PORT +\r\n      \"/rest/task/save\";\r\n\r\n    fetch(url, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        taskId: this.state.taskId,\r\n        taskName: this.state.taskName,\r\n        description: this.state.description,\r\n        duration: this.state.duration,\r\n        dependencies: this.state.dependencies,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(() => {\r\n        alert(\"Successfully saved task!\");\r\n        this.populateTasksWithVal(this.state.taskId);\r\n      })\r\n      .catch(function (e) {\r\n        alert(\"Error: \" + e.message);\r\n      });\r\n  }\r\n\r\n  refreshComps() {\r\n    this.populateTasksWithVal(this.state.taskId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container fluid=\"sm\">\r\n          <Row xl={10}>\r\n            <h2>Update Existing Task</h2>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Select Task to Update</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                as=\"select\"\r\n                onChange={(e) => this.updateForm(e)}\r\n                custom\r\n                size=\"md\"\r\n                value={this.state.taskId}\r\n              >\r\n                {this.state.availableTask.map((item) => (\r\n                  <option key={item.taskId} value={item.taskId}>\r\n                    {item.taskId} - {item.taskName}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Task Name</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Task Name\"\r\n                value={this.state.taskName}\r\n                onChange={(e) => this.taskNameHandler(e)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Task Description</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Description\"\r\n                value={this.state.description}\r\n                onChange={(e) => this.descriptionHandler(e)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Duration by Days</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                as=\"select\"\r\n                onChange={(e) => this.durationHandler(e)}\r\n                custom\r\n                size=\"sm\"\r\n                value={this.state.duration}\r\n              >\r\n                {this.buildDurationOptions()}\r\n              </Form.Control>\r\n            </Col>\r\n          </Row>\r\n          <Row xl>\r\n            <Col>\r\n              <Form.Label>Select Dependency Tasks</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                as=\"select\"\r\n                onChange={(e) => this.dependencyTaskHandler(e)}\r\n                multiple\r\n                custom\r\n                size=\"lg\"\r\n                value={this.state.selectedTasks}\r\n              >\r\n                {this.state.eligibleTasks.map((item) => (\r\n                  <option key={item.taskId} value={item.taskId}>\r\n                    {item.taskId} - {item.taskName}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col> </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col> </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button variant=\"primary\" onClick={() => this.saveTask()}>\r\n                Save\r\n              </Button>{\" \"}\r\n              <Button variant=\"info\" onClick={() => this.refreshComps()}>\r\n                Refresh Components\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UpdateTask;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport React, { Component } from \"react\";\r\nimport DatePicker from 'react-date-picker';\r\n\r\nclass CreateProject extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projectName: \"\",\r\n      projectDescription: \"\",\r\n      startDate: new Date(),\r\n      availableTask: [],\r\n      taskViews: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateTask();\r\n  }\r\n\r\n  populateTask() {\r\n    let url = 'http://' + process.env.REACT_APP_SPRING_BOOT_BASE_PORT + '/rest/task/all';\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          availableTask: json,\r\n        });\r\n      });\r\n  }\r\n\r\n  projectNameHandler(e) {\r\n    this.setState({ projectName: e.target.value });\r\n  }\r\n\r\n  projectDescriptionHandler(e) {\r\n    this.setState({ projectDescription: e.target.value });\r\n  }\r\n\r\n  onChange = date => {this.setState({ startDate: date })};\r\n\r\n  dependencyTaskHandler(e) {\r\n    let value = Array.from(e.target.selectedOptions, (option) => option.value);\r\n\r\n    let dep = [];\r\n\r\n    value.forEach((element) => {\r\n      dep.push({ taskId: element });\r\n    });\r\n\r\n    this.setState({ taskViews: dep });\r\n  }\r\n\r\n  saveProject() {\r\n    \r\n    let url = 'http://' + process.env.REACT_APP_SPRING_BOOT_BASE_PORT + '/rest/project/save';\r\n    fetch(url, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        projectName: this.state.projectName,\r\n        projectDescription: this.state.projectDescription,\r\n        startDate: this.state.startDate,\r\n        taskViews: this.state.taskViews,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(() => alert(\"Successfully saved project!\"))\r\n      .catch(function (e) {\r\n        alert(\"Error: \" + e.message);\r\n      });\r\n\r\n    this.setState({\r\n      projectName: \"\",\r\n      projectDescription: \"\",\r\n      startDate: new Date(),\r\n      availableTask: [],\r\n    });\r\n\r\n    this.populateTask();\r\n\r\n  }\r\n\r\n  refreshComps() {\r\n    this.populateTask();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container fluid=\"sm\">\r\n          <Row xl={10}>\r\n            <h2>Create a new Project</h2>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Project name</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Project name\"\r\n                value={this.state.projectName}\r\n                onChange={(e) => this.projectNameHandler(e)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Project Description</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Project Description\"\r\n                value={this.state.projectDescription}\r\n                onChange={(e) => this.projectDescriptionHandler(e)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Start Date</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <DatePicker \r\n                onChange={this.onChange}\r\n                value={this.state.startDate}\r\n              >\r\n              </DatePicker>\r\n            </Col>\r\n          </Row>\r\n          <Row xl>\r\n            <Col>\r\n              <Form.Label>Select Tasks</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                as=\"select\"\r\n                onChange={(e) => this.dependencyTaskHandler(e)}\r\n                multiple\r\n                custom\r\n                size=\"lg\"\r\n              >\r\n                {this.state.availableTask.map((item) => (\r\n                  <option key={item.taskId} value={item.taskId}>\r\n                    {item.taskId} - {item.taskName}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col> </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col> </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button variant=\"primary\" onClick={() => this.saveProject()}>\r\n                Save\r\n              </Button>{\" \"}\r\n              <Button variant=\"info\" onClick={() => this.refreshComps()}>\r\n                Refresh Components\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateProject;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport React, { Component } from \"react\";\r\nimport DatePicker from \"react-date-picker\";\r\n\r\nclass UpdateProject extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projectId: 0,\r\n      projectName: \"\",\r\n      projectDescription: \"\",\r\n      startDate: new Date(),\r\n      taskViews: [],\r\n      availableTask: [],\r\n      selectedTasks: [],\r\n      listProjects: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateTasks();\r\n    this.populateProject();\r\n  }\r\n\r\n  projectNameHandler(e) {\r\n    this.setState({ projectName: e.target.value });\r\n  }\r\n\r\n  projectDescriptionHandler(e) {\r\n    this.setState({ projectDescription: e.target.value });\r\n  }\r\n\r\n  onChange = (date) => this.setState({ startDate: date });\r\n\r\n  dependencyTaskHandler(e) {\r\n    let value = Array.from(e.target.selectedOptions, (option) => option.value);\r\n\r\n    this.setState({ selectedTasks: value });\r\n\r\n    let dep = [];\r\n\r\n    value.forEach((element) => {\r\n      dep.push({ taskId: element });\r\n    });\r\n\r\n    this.setState({ taskViews: dep });\r\n  }\r\n\r\n  updateForm(e) {\r\n    let val = e.target.value;\r\n    this.initializeForm(val);\r\n  }\r\n\r\n  initializeForm(val) {\r\n    this.setState({\r\n      projectId: val,\r\n    });\r\n\r\n    let url = 'http://' + process.env.REACT_APP_SPRING_BOOT_BASE_PORT + '/rest/project/id/' + val;\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        let dep = [];\r\n\r\n        if (json.taskViews) {\r\n          json.taskViews.forEach((element) => {\r\n            dep.push(element.taskId);\r\n          });\r\n        }\r\n\r\n        this.setState({\r\n          projectName: json.projectName,\r\n          projectDescription: json.projectDescription,\r\n          startDate: new Date(json.startDate),\r\n          selectedTasks: dep,\r\n          taskViews: json.taskViews,\r\n        });\r\n      });\r\n  }\r\n\r\n  populateProject() {\r\n    let val;\r\n    let url = 'http://' + process.env.REACT_APP_SPRING_BOOT_BASE_PORT + '/rest/project/all';\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          listProjects: json,\r\n        });\r\n        val = this.state.listProjects[0].projectId;\r\n        this.initializeForm(val);\r\n      });\r\n  }\r\n\r\n  populateProjectWithVal(val) {\r\n\r\n    let url = 'http://' + process.env.REACT_APP_SPRING_BOOT_BASE_PORT + '/rest/project/all';\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          listProjects: json,\r\n        });\r\n        this.initializeForm(val);\r\n      });\r\n  }\r\n\r\n  populateTasks() {\r\n    let url = 'http://' + process.env.REACT_APP_SPRING_BOOT_BASE_PORT + '/rest/task/all';\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          availableTask: json,\r\n        });\r\n      });\r\n  }\r\n\r\n  saveProject() {\r\n    let url = 'http://' + process.env.REACT_APP_SPRING_BOOT_BASE_PORT + '/rest/project/save';\r\n    fetch(url, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        projectId: this.state.projectId,\r\n        projectName: this.state.projectName,\r\n        projectDescription: this.state.projectDescription,\r\n        startDate: this.state.startDate,\r\n        taskViews: this.state.taskViews,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(() => {\r\n        alert(\"Successfully saved project!\");\r\n        this.populateTasks();\r\n        this.populateProjectWithVal(this.state.projectId);\r\n      })\r\n      .catch(function (e) {\r\n        alert(\"Error: \" + e.message);\r\n      });\r\n  }\r\n\r\n  refreshComps() {\r\n    this.populateTasks();\r\n    this.populateProjectWithVal(this.state.projectId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container fluid=\"sm\">\r\n          <Row xl={10}>\r\n            <h2>Update Existing Project</h2>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Select Project to Update</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                as=\"select\"\r\n                onChange={(e) => this.updateForm(e)}\r\n                custom\r\n                size=\"md\"\r\n                value={this.state.projectId}\r\n              >\r\n                {this.state.listProjects.map((item) => (\r\n                  <option key={item.projectId} value={item.projectId}>\r\n                    {item.projectId} - {item.projectName}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Project name</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Project name\"\r\n                value={this.state.projectName}\r\n                onChange={(e) => this.projectNameHandler(e)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Project Description</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Project Description\"\r\n                value={this.state.projectDescription}\r\n                onChange={(e) => this.projectDescriptionHandler(e)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Label>Start Date</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <DatePicker\r\n                onChange={this.onChange}\r\n                value={this.state.startDate}\r\n                format=\"y-MM-dd\"\r\n              ></DatePicker>\r\n            </Col>\r\n          </Row>\r\n          <Row xl>\r\n            <Col>\r\n              <Form.Label>Select Tasks</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                as=\"select\"\r\n                onChange={(e) => this.dependencyTaskHandler(e)}\r\n                multiple\r\n                custom\r\n                size=\"lg\"\r\n                value={this.state.selectedTasks}\r\n              >\r\n                {this.state.availableTask.map((item) => (\r\n                  <option key={item.taskId} value={item.taskId}>\r\n                    {item.taskId} - {item.taskName}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col> </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col> </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button variant=\"primary\" onClick={() => this.saveProject()}>\r\n                Save\r\n              </Button>{\" \"}\r\n              <Button variant=\"info\" onClick={() => this.refreshComps()}>\r\n                Refresh Components\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UpdateProject;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport React, { Component } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport { Popover } from \"react-bootstrap\";\r\nimport { OverlayTrigger } from \"react-bootstrap\";\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nfunction Event({ event }) {\r\n  let popoverClickRootClose = (\r\n    <Popover id=\"popover-trigger-click-root-close\" style={{ zIndex: 10000 }}>\r\n      <p>\r\n        <strong>Information for Task: {event.title}</strong>\r\n      </p>\r\n      <Table striped hover size=\"sm\" responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>Task Type</th>\r\n              <th>Task ID</th>\r\n              <th>Task Name</th>\r\n              <th>Duration in Days</th>\r\n              <th>Start Date</th>\r\n              <th>End Date</th>\r\n              <th>Dependent Tasks</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            <tr>\r\n              <td>{event.task.taskType}</td>\r\n              <td>{event.task.taskId}</td>\r\n              <td>{event.task.taskName}</td>\r\n              <td>{event.task.duration}</td>\r\n              <td>{event.task.startDate}</td>\r\n              <td>{event.task.endDate}</td>\r\n              <td>\r\n                {event.task.dependencies\r\n                  ? event.task.dependencies.map((subItem) => (\r\n                      <p key={subItem.taskId}>\r\n                        {subItem.taskId} - {subItem.taskName} (\r\n                        {subItem.startDate} - {subItem.endDate})\r\n                      </p>\r\n                    ))\r\n                  : \"None\"}\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      \r\n    </Popover>\r\n  );\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <div>\r\n        <OverlayTrigger\r\n          id=\"help\"\r\n          trigger=\"click\"\r\n          rootClose\r\n          container={this}\r\n          placement=\"top\"\r\n          overlay={popoverClickRootClose}\r\n        >\r\n          <div>{event.title}</div>\r\n        </OverlayTrigger>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass ViewPerProject extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projectId: 0,\r\n      projectName: \"\",\r\n      startDate: \"\",\r\n      taskViews: [],\r\n      listProjects: [],\r\n      events: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateProject();\r\n  }\r\n\r\n  populateProject() {\r\n    let val;\r\n    let url =\r\n      \"http://\" +\r\n      process.env.REACT_APP_SPRING_BOOT_BASE_PORT +\r\n      \"/rest/project/all/withtasks\";\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          listProjects: json,\r\n        });\r\n        val = this.state.listProjects[0].projectId;\r\n        this.initializeTable(val);\r\n      });\r\n  }\r\n\r\n  initializeTable(val) {\r\n    this.setState({\r\n      projectId: val,\r\n    });\r\n\r\n    let url =\r\n      \"http://\" +\r\n      process.env.REACT_APP_SPRING_BOOT_BASE_PORT +\r\n      \"/rest/scheduler/view/\" + val;\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          projectName: json.projectName,\r\n          projectDescription: json.projectDescription,\r\n          startDate: json.startDate,\r\n          taskViews: json.taskViews,\r\n        });\r\n        this.createTaskEvents(json.taskViews);\r\n      });\r\n  }\r\n\r\n  createTaskEvents(taskViews) {\r\n    this.setState({ events: [] });\r\n    let ts = [];\r\n    if (taskViews) {\r\n      taskViews.forEach((item) => {\r\n        ts.push({\r\n          start: new Date(item.startDate),\r\n          end: new Date(item.endDate),\r\n          title: item.taskId + \" - \" + item.taskName,\r\n          task: item\r\n        });\r\n      });\r\n\r\n      this.setState({ events: ts });\r\n    }\r\n  }\r\n\r\n  updateForm(e) {\r\n    let val = e.target.value;\r\n    this.initializeTable(val);\r\n  }\r\n\r\n  refreshComps() {\r\n\r\n    let url = 'http://' + process.env.REACT_APP_SPRING_BOOT_BASE_PORT + '/rest/project/all/withtasks';\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          listProjects: json,\r\n        });\r\n        this.initializeTable(this.state.projectId);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container fluid=\"sm\">\r\n          <Row md={{ span: 2 }}>\r\n            <h2>View Project Schedule</h2>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 2 }}>\r\n              <Form.Label>Select Project to View</Form.Label>\r\n            </Col>\r\n            <Col md={{ span: 4 }}>\r\n              <Form.Control\r\n                as=\"select\"\r\n                onChange={(e) => this.updateForm(e)}\r\n                custom\r\n                size=\"sm\"\r\n                value={this.state.projectId}\r\n              >\r\n                {this.state.listProjects.map((item) => (\r\n                  <option key={item.projectId} value={item.projectId}>\r\n                    {item.projectId} - {item.projectName}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Col>\r\n            <Col md={{span: 2}}>\r\n              <Button variant=\"info\" onClick={() => this.refreshComps()}>\r\n                Refresh\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 2 }}>\r\n              <Form.Label>Project ID</Form.Label>\r\n            </Col>\r\n            <Col md={{ span: 2 }}>\r\n              <Form.Label>{this.state.projectId}</Form.Label>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 2 }}>\r\n              <Form.Label>Project Name</Form.Label>\r\n            </Col>\r\n            <Col md={{ span: 2 }}>\r\n              <Form.Label>{this.state.projectName}</Form.Label>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 2 }}>\r\n              <Form.Label>Start Date</Form.Label>\r\n            </Col>\r\n            <Col md={{ span: 2 }}>\r\n              <Form.Label>{this.state.startDate}</Form.Label>\r\n            </Col>\r\n          </Row>\r\n          <Row xl={20}>\r\n            <Table striped bordered hover variant=\"dark\" responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th>Task Type</th>\r\n                  <th>Task ID</th>\r\n                  <th>Task Name</th>\r\n                  <th>Duration in Days</th>\r\n                  <th>Start Date</th>\r\n                  <th>End Date</th>\r\n                  <th>Dependent Tasks</th>\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                {this.state.taskViews.map((item) => (\r\n                  <tr key={item.taskId}>\r\n                    <td>{item.taskType}</td>\r\n                    <td>{item.taskId}</td>\r\n                    <td>{item.taskName}</td>\r\n                    <td>{item.duration}</td>\r\n                    <td>{item.startDate}</td>\r\n                    <td>{item.endDate}</td>\r\n                    <td>\r\n                      {item.dependencies\r\n                        ? item.dependencies.map((subItem) => (\r\n                            <p key={subItem.taskId}>\r\n                              {subItem.taskId} - {subItem.taskName} (\r\n                              {subItem.startDate} - {subItem.endDate})\r\n                            </p>\r\n                          ))\r\n                        : \"None\"}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </Row>\r\n          <Row xl={100}>\r\n            <Col>\r\n              <p>\r\n                <Calendar\r\n                  localizer={localizer}\r\n                  defaultDate={new Date()}\r\n                  defaultView=\"month\"\r\n                  events={this.state.events}\r\n                  views={[\"month\"]}\r\n                  style={{ height: \"50vh\" }}\r\n                  components={{\r\n                    event: Event,\r\n                  }}\r\n                />\r\n              </p>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button variant=\"danger\">Close</Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ViewPerProject;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React, { Component } from \"react\";\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from 'react-bootstrap/Tab'\n\nimport CreateTask from \"./components/CreateTask.js\";\nimport UpdateTask from \"./components/UpdateTask.js\";\nimport CreateProject from \"./components/CreateProject.js\";\nimport UpdateProject from \"./components/UpdateProject.js\";\nimport ViewPerProject from \"./components/ViewPerProject.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Tabs defaultActiveKey=\"viewPerProject\" id=\"tab1\">\n          <Tab eventKey=\"createTask\" title=\"Create Task\"><CreateTask /></Tab>\n          <Tab eventKey=\"updateTask\" title=\"Update Existing Task\"><UpdateTask /></Tab>\n          <Tab eventKey=\"createProject\" title=\"Create Project\"><CreateProject /></Tab>\n          <Tab eventKey=\"updateProject\" title=\"Update Existing Project\"><UpdateProject /></Tab>\n          <Tab eventKey=\"viewPerProject\" title=\"View Project Schedule\"><ViewPerProject /></Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}